download.file(destfile = "training", url = "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv", method = "curl")
download.file(destfile = "training", url = "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv", method = "CURL")
download.file(destfile = "training", url = "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv", method = "curl")
curl <- getCurlHandle()
opts <- list(
proxy         = "proxy_weg",
proxyusername = "jschmitt",
proxypassword = "Butuc4104",
proxyport     = 8080
)
download.file(destfile = "training", url = "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv", method = "curl", .opts = opts)
download.file(destfile = "training.csv", url = "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv")
download.file(destfile = "testing.csv", url = "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv")
training <- read.csv("training.csv")
testing <- read.csv("testing.csv")
dim(training)
dim(testing)
head(training)
training <- read.csv("training.csv", na.strings = "NA")
testing <- read.csv("testing.csv", na.strings = "NA")
head(training[1:10,])
dim(testing)
head(training[150:160,])
head(training[140:150,])
file.exists("training.csv")
?download.file
install.packages("randomForest")
dim(train)
training <- read.csv("training.csv", na.strings = c("NA","#DIV/0!"))
testing <- read.csv("testing.csv", na.strings = c("NA","#DIV/0!"))
training <- training[,grepl("belt|arm|dumbbell|classe", names(training))]
testing <- testing[,grepl("belt|arm|dumbbell|problem", names(testing))]
training <- training[,colSums(is.na(training)) == 0]
testing <- testing[,colSums(is.na(testing)) == 0]
inTrain <- createDataPartition(y = training$classe, p = 3/4, list = FALSE)
train <- training[inTrain,]
test <- training[-inTrain,]
library(randomForest)
library(caret)
install.packages("caret")
install.packages("caret")
training <- read.csv("training.csv", na.strings = c("NA","#DIV/0!"))
testing <- read.csv("testing.csv", na.strings = c("NA","#DIV/0!"))
library(randomForest)
library(caret)
training <- training[,grepl("belt|arm|dumbbell|classe", names(training))]
testing <- testing[,grepl("belt|arm|dumbbell|problem", names(testing))]
training <- training[,colSums(is.na(training)) == 0]
testing <- testing[,colSums(is.na(testing)) == 0]
inTrain <- createDataPartition(y = training$classe, p = 3/4, list = FALSE)
train <- training[inTrain,]
test <- training[-inTrain,]
dim(train)
glmFit <- train(classe ~ ., data = train, method = "glm")
sum(is.na(train))
colSums(is.na(training))
colSums(is.na(train))
summary(train)
training <- read.csv("training.csv", na.strings = c("NA","#DIV/0!"))
testing <- read.csv("testing.csv", na.strings = c("NA","#DIV/0!"))
training <- training[,grepl("belt|arm|dumbbell|classe", names(training))]
testing <- testing[,grepl("belt|arm|dumbbell|problem", names(testing))]
training <- training[,colSums(is.na(training)) == 0]
testing <- testing[,colSums(is.na(testing)) == 0]
inTrain <- createDataPartition(y = training$classe, p = 3/4, list = FALSE)
trainingSet <- training[inTrain,]
testingSet <- training[-inTrain,]
library(caret)
inTrain <- createDataPartition(y = training$classe, p = 3/4, list = FALSE)
trainingSet <- training[inTrain,]
testingSet <- training[-inTrain,]
modGlm <- train(classe ~ ., data = trainingSet, method = "glm")
names(trainingSet)
modGlm <- train(classe ~ roll_belt, data = trainingSet, method = "glm")
trainingSet$classe <- as.factor(trainingSet$classe)
modGlm <- train(classe ~ roll_belt, data = trainingSet, method = "glm")
summary(trainingSet$classe)
summary(trainingSet$roll_belt)
class(trainingSet$classe)
class(trainingSet$roll_belt)
library(kernlab)
modGlm <- train(classe ~ roll_belt, data = trainingSet, method = "glm")
str(trainingSet)
modGlm <- train(as.factor(classe) ~ roll_belt, data = trainingSet, method = "glm")
modGlm <- train(roll_forearm ~ roll_belt, data = trainingSet, method = "glm")
levels(trainingSet$classe)
trainingSet$classe[trainingSet$classe == "A", ] <- 1
trainingSet$classe[trainingSet$classe == "A"] <- 1
trainingSet$classeIdx[trainingSet$classe == "A"] <- 1
trainingSet$classeIdx[trainingSet$classe == "B"] <- 2
trainingSet$classeIdx[trainingSet$classe == "C"] <- 3
trainingSet$classeIdx[trainingSet$classe == "D"] <- 4
trainingSet$classeIdx[trainingSet$classe == "E"] <- 5
names(trainingSet)
names(subset(trainingSet, select = -c("classe")))
names(subset(trainingSet, select = c(-"classe")))
names(subset(trainingSet, select = c("classe")))
names(subset(trainingSet, select = -c("classe")))
library(dplyr)
names(trainingSet %>% select(-"name"))
names(trainingSet %>% select(-name))
names(trainingSet %>% select(name))
names(trainingSet %>% select("name"))
names(trainingSet %>% select(name))
names(trainingSet %>% select(classe))
names(trainingSet %>% select(-classe))
trainingSet <- trainingSet %>% select(-classe)
modGlm <- train(classeIdx ~ ., data = trainingSet, method = "glm")
head(trainingSet$classeIdx)
inTrain <- createDataPartition(y = training$classe, p = 3/4, list = FALSE)
trainingSet <- training[inTrain,]
testingSet <- training[-inTrain,]
?rpart
modRPART <- train(classe ~ ., data = trainingSet, method = "rpart")
plot(modRPART$finalModel, uniform = TRUE, main = "Classification Tree")
test(modRPART$finalModel, use.n = TRUE, all = TRUE, cex = .8)
text(modRPART$finalModel, use.n = TRUE, all = TRUE, cex = .8)
library(rattle)
install.packages("rattle")
library(rattle)
install.packages("RGtk2")
install.packages("rattle")
install.packages("GTK")
library(dplyr)
library(randomForest)
library(rpart)
library(rattle)
library(caret)
training <- read.csv("training.csv", na.strings = c("NA","#DIV/0!"))
testing <- read.csv("testing.csv", na.strings = c("NA","#DIV/0!"))
training <- training[,grepl("belt|arm|dumbbell|classe", names(training))]
testing <- testing[,grepl("belt|arm|dumbbell|problem", names(testing))]
training <- training[,colSums(is.na(training)) == 0]
testing <- testing[,colSums(is.na(testing)) == 0]
inTrain <- createDataPartition(y = training$classe, p = 3/4, list = FALSE)
trainingSet <- training[inTrain,]
testingSet <- training[-inTrain,]
modFit <- train(classe ~ ., method = "rpart", data = trainingSet)
modRPART <- train(classe ~ ., method = "rpart", data = trainingSet)
fancyRpartPlot(modRPART$finalModel)
fancyRpartPlot(modRPART$finalModel)
library(rattle)
fancyRpartPlot(modRPART$finalModel)
install.packages("rpart.plot")
fancyRpartPlot(modRPART$finalModel)
confusionMatrix(predict(modRPART, testingSet), testingSet$classe)
confusionMatrix(predict(modRPART, testingSet), testingSet$classe)$overall
confusionMatrix(predict(modRPART, testingSet), testingSet$classe)$overall[1]
modRF <- train(classe ~ ., data = trainingSet, method = "rf", prox = TRUE)
modRF
modRF <- randomForest(classe ~ ., data = trainingSet, proximity = TRUE, keep.forest = FALSE)
modRF <- randomForest(classe ~ ., data = trainingSet, ntree= 1000, keep.forest = FALSE, importance)
modRF <- randomForest(classe ~ ., data = trainingSet, ntree= 1000, keep.forest = FALSE, importance = TRUE)
modRF <- randomForest(classe ~ ., data = trainingSet)
head(iris)
randomForest(Species ~., data = iris)
dim(trainingSet)
dim(iris)
modRF <- randomForest(classe ~ ., data = trainingSet)
modRF
confusionMatrix <- confusionMatrix(predict(modRF, testingSet), testingSet$classe)
print(confusionMatrix)
modRPART <- train(classe ~ ., method = "rpart", data = trainingSet, trControl = trainControl(method = "cv"))
modRPART <- train(classe ~ .,
method = "rpart",
data = trainingSet,
trControl = trainControl(method = "cv"),
number = 3)
modRPART <- train(classe ~ .,
method = "rpart",
data = trainingSet)
modRPART <- train(classe ~ .,
method = "rpart",
data = trainingSet,
trControl = trainControl(method = "cv", number = 3))
fancyRpartPlot(modRPART$finalModel)
confusionMatrix <- confusionMatrix(predict(modRPART, testingSet), testingSet$classe)
print(confusionMatrix)
modRF <- train(classe ~ .,
method = "rf",
data = trainingSet,
trControl = trainControl(method = "cv", number = 3))
modRF
cmRF <- confusionMatrix(predict(modRF, testingSet), testingSet$classe)
print(cmRF)
round(cmRF$overall[1] * 100, 2)
plot(margin(modRF))
getTree(modRG)
getTree(modRF)
getTree(modRF$finalModel)
getTree(modRF$finalModel, k = 2)
varImpPlot(modRF)
varImpPlot(modRF$finalModel)
names(trainingSet)
names(trainingSet[-52])
names(trainingSet[-53])
M <- abs(cor(trainingSet[-53]))
diag(M) <- 0
which(M > 0.7, arr.ind = T)
varImpPlot(modRF$finalModel)
varImpPlot(modRF$finalModel)
modPCA <- prcomp(trainingSet[-53])
modPCA$rotation
modPCA
modPCA
modPCA$sdev
modPCA <- prcomp(trainingSet[-53], tol = 0.8)
modPCA
modPCA <- preProcess(trainingSet[-53], method = "pca", thresh = .75)
modPCA$rotation
modPCA
modPCA$std
names(trainingSet)
modPCA$rotation
modPCA$rotation[,1]
plot(modPCA$rotation[,1],modPCA$rotation[,2])
plot(modPCA$rotation[,2],modPCA$rotation[,3])
plot(modPCA$rotation[,4],modPCA$rotation[,5])
sum(modPCA$rotation[,1])
sum(modPCA$rotation[,2])
sum(modPCA$rotation[,3])
sum(modPCA$rotation[,4])
sum(modPCA$rotation[,5])
sum(modPCA$rotation[,6])
sum(modPCA$rotation[,7])
sum(modPCA$rotation[,8])
sum(modPCA$rotation[,10])
sum(modPCA$rotation[,11])
modPCA <- preProcess(trainingSet[-53], method = "pca", thresh = .75)
modRF
cmRF <- confusionMatrix(predict(modRF, testingSet), testingSet$classe)
print(cmRF)
modRF <- train(classe ~ .,
method = "rf",
data = trainingSet,
preProcess = modPCA
trControl = trainControl(method = "cv", number = 3))
modRF <- train(classe ~ .,
method = "rf",
data = trainingSet,
preProcess = modPCA,
parallel = TRUE,
trControl = trainControl(method = "cv", number = 3))
modRF <- train(classe ~ .,
method = "rf",
data = trainingSet,
preProcess = "pca",
trControl = trainControl(method = "cv", number = 3, preProcOptions = list(thresh = 0.75)))
modRF
cmRF <- confusionMatrix(predict(modRF, testingSet), testingSet$classe)
cmRF
varImpPlot(modRF)
rf <- randomForest(classe ~ ., data = trainingSet)
varImpPlot(modRF)
varImpPlot(rf)
temp <- varImpPlot(modRF)
temp <- varImpPlot(rf)
rf$importance
order(rf$importance)
rf$importance[order(rf$importance),]
rf$importance[order(rf$importance, decreasing = T),]
rf$importance[order(rf$importance, decreasing = T),][10]
rf$importance[order(rf$importance, decreasing = T),][10,]
rf$importance[order(rf$importance, decreasing = T),]
rf[order(rf$importance, decreasing = T),]$importance
rf$importance[order(rf$importance, decreasing = T),]
rf$importance[order(rf$importance, decreasing = T),][10,]
rf$importance[order(rf$importance, decreasing = T),][10]
rf$importance[order(rf$importance, decreasing = T),][1:10]
rf$importance[order(rf$importance, decreasing = T),][1:15]
names(rf$importance[order(rf$importance, decreasing = T),][1:15])
relevantPrecitors <- names(rf$importance[order(rf$importance, decreasing = T),][1:15])
redTrain <- trainingSet[,c("classe", relevantPrecitors)]
redTrain
dim(redTrain)
redTest <- testingSet[,c("classe", relevantPrecitors)]
dim(redTest)
names(redTrain)
varCorr <- abs(cor(redTrain[,-1]))
diag(varCorr) <- 0
which(varCorr > 0.7, arr.ind = T)
which(varCorr > 0.8, arr.ind = T)
correlated <- which(varCorr > 0.8, arr.ind = T)
print(correlated)
relevantPrecitors <- names(rf$importance[order(rf$importance, decreasing = T),][1:10])
varCorr <- abs(cor(redTrain[,-1]))
diag(varCorr) <- 0
correlated <- which(varCorr > 0.8, arr.ind = T)
print(correlated)
relevantPrecitors
relevantPrecitors[c(-1,)]
relevantPrecitors[c(-1),]
relevantPrecitors[-c(1),]
relevantPrecitors[-1,]
relevantPrecitors[-1]
relevantPrecitors[c(-1)]
relevantPrecitors[c(-2,-10)]
relevantPrecitors[c(-2,-3)]
relevantPrecitors
relevantPrecitors[c(-2,-10)]
modRFRed <- train(classe ~ .,
method = "rf",
data = trainingSet,
trControl = trainControl(method = "cv", number = 3))
modRFRed <- train(classe ~ .,
method = "rf",
data = redTrain,
trControl = trainControl(method = "cv", number = 3))
cmRFRed <- confusionMatrix(predict(modRFRed, redTest), redTest$classe)
cmRFRed
library(dplyr)
library(randomForest)
library(rpart)
library(rattle)
library(caret)
training <- read.csv("training.csv", na.strings = c("NA","#DIV/0!"))
testing <- read.csv("testing.csv", na.strings = c("NA","#DIV/0!"))
training <- training[,grepl("belt|arm|dumbbell|classe", names(training))]
testing <- testing[,grepl("belt|arm|dumbbell|problem", names(testing))]
training <- training[,colSums(is.na(training)) == 0]
testing <- testing[,colSums(is.na(testing)) == 0]
inTrain <- createDataPartition(y = training$classe, p = 3/4, list = FALSE)
trainingSet <- training[inTrain,]
testingSet <- training[-inTrain,]
modRPART <- train(classe ~ .,
method = "rpart",
data = trainingSet,
trControl = trainControl(method = "cv", number = 3))
fancyRpartPlot(modRPART$finalModel)
predict(modRPART, newdata = testing)
head(testing$problem_id)
testing$problem_id
rf <- randomForest(classe ~ ., data = trainingSet)
cmRF <- confusionMatrix(predict(rf, testingSet), testingSet$classe)
cmRF
predict(rf, newdata = testing)
